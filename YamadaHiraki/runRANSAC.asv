%Attention Prediction in Egocentric Video Using Motion and Visual Saliency
%Yamada, Sugano, Okabe, Sato, Sugimoto, Hiraki

%presets
run('C:\Users\Alicia\dev\vlfeat-0.9.20\toolbox\vl_setup');
numSamples = 1000;
numFrames = 1;
cameraParams = load('utility\pivotheadParameters.mat');
cameraParams = cameraParams.pivotheadParameters;
K = cameraParams.IntrinsicMatrix;
%data
vid = VideoReader('data\head_test.mp4');
start = 100;
frame = read(vid, start);
resultFrames = [];
corners = cv.goodFeaturesToTrack(rgb2gray(frame));

for i=1:numFrames
    frame_prev = frame;
    corners_prev = corners;
    frame = read(vid, start+i);
    
    %find features
    corners = cv.calcOpticalFlowPyrLK(rgb2gray(frame_prev), rgb2gray(frame), corners_prev);
%     if(size(corners,2) < 500)
        %fix to add, not replace
%         corners = cv.goodFeaturesToTrack(rgb2gray(frame));
%     end
    c_prev = [corners_prev{:}];
    c_prev = reshape(c_prev,[2 1000])';
    c_det = [corners{:}];
    c_det = reshape(c_det,[2 1000])';


    perm = randperm(min([size(c_prev,1) size(c_det,1)]));
    sampleRange = perm(1:numSamples);

%     fig = figure('Name', 'Image');
%     imshow(frame);
%     hold on;
%     scatter(c_prev(sampleRange,1), c_prev(sampleRange,2), 30, 'b');
%     scatter(c_det(sampleRange,1), c_det(sampleRange,2), 30, 'r');
%     hold off;
%     resultFrames = cat(4, resultFrames, saveFrame(fig));

    %Fundamental matrix
    F = estimateFundamentalMatrix(c_prev, c_det, 'Method', 'RANSAC', 'NumTrials', 3000, 'DistanceThreshold', 1e-4)
%     F = part2_2(F)
%     part2_3(F, c_prev, frame_prev, c_det, frame);

    h_prev = [c_prev ones(size(c_prev,1),1)];
    h_det = [c_det ones(size(c_det,1),1)];
    %validate
    fErrs = size(numSamples,1);
    for s=1:numSamples
        fErrs(s,1) = h_prev(s,:) * F * h_det(s,:)';
    end
    sprintf('Fundamental Matrix error:\n Mean: %f, Max: %f, Median: %f', mean(fErrs), max(fErrs), median(fErrs))
    h_prev_norm = K \ h_prev';
    h_det_norm = K \ h_det';

    E = K' * F * K;
    [U, S, V] = svd(E);
    Enew = U*diag([1 1 0])*V'
    
    eErrs = size(numSamples,1);
    for s=1:numSamples
        eErrs(s,1) = h_prev_norm(:,s)' * Enew * h_det_norm(:,s);
    end
    sprintf('Essential Matrix error:\n Mean: %f, Max: %f, Median: %f', mean(eErrs), max(eErrs), median(eErrs))
    
    W = [0 -1 0; 1 0 0; 0 0 1];
    R1 = U*W*V'
    R2 = U*W'*V'
    t = null(Enew')
    
    h_prev_norm = [h_prev_norm; ones(1,size(h_prev_norm,2))];
    h_det_norm = [h_det_norm; ones(1,size(h_det_norm,2))];
    
    
    h_pred1 = K * [R1 t] * h_prev_norm;
    h_pred2 = K * [R2 t] * h_prev_norm;
    
    r1Errs = 
%     
%     fig = figure('Name', 'Image');
%     imshow(frame);
%     hold on;
%     scatter(h_prev(sampleRange,1), h_prev(sampleRange,2), 30, 'b');
%     scatter(h_pred1(sampleRange,1), h_pred1(sampleRange,2), 30, 'r');
%     scatter(h_pred2(sampleRange,1), h_pred2(sampleRange,2), 30, 'g');
%     hold off;
%     resultFrames = cat(4, resultFrames, saveFrame(fig));
    % while CONDITION
    
%     numSamples = 8;
%     perm = randperm(min([size(c_prev,1) size(c_det,1)]));
%     sampleRange = perm(1:numSamples);
%     s_prev = c_prev(sampleRange,:);
%     s_det = c_det(sampleRange,:);
%     F = part2_2(part2_1(s_prev, s_det))
%     part2_3(F, s_prev, frame_prev, s_det, frame);
    
% end

%sift
% % frame_prev = im2single(rgb2gray(frame_prev));
% % [fp, dp] = vl_sift(frame_prev);
% % frame = im2single(rgb2gray(frame));
% % [f, d] = vl_sift(frame);
% %match
% % [matches, scores] = vl_ubcmatch(dp, d) ;
% % perm = randperm(size(matches,2));
% % sel = perm(1:50);
% % 
% % pair = createImagePair(frame_prev, frame);
% % f_offset = f;
% % f_offset(1,:) = f_offset(1,:) + size(frame,2);
% % numMatches = size(matches,2);
% % 
% % selMatches = matches(:,sel);
% % matchLines = getMatchLines(matches(:,1:50), fp, f_offset);
% % figure('Name', 'Matches'), imshow(pair);
% % hold on
% % vl_plotframe(fp);
% % vl_plotframe(f_offset);
% % matchLineColor = hsv(size(sel,2));
% % for m=1:size(sel,2)
% %     line(matchLines(2*m-1:2*m,1),matchLines(2*m-1:2*m,2), 'color', matchLineColor(m,:))
% % end
% % hold off
% % 
end

% implay(resultFrames);